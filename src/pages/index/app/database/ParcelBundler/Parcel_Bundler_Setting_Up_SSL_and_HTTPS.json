{
  "metadata": {
    "title": "Parcel_Bundler_Setting_Up_SSL_and_HTTPS",
    "length": 734,
    "generated_by": "gpt-3.5-turbo",
    "timestamp": "2023-12-21T04:18:30.961Z"
  },
  "article": "## Parcel Bundler: Setting Up SSL and HTTPS\n\n### Introduction\nThis documentation provides step-by-step instructions on how to set up SSL (Secure Sockets Layer) and HTTPS (Hypertext Transfer Protocol Secure) for a project using Parcel Bundler. SSL and HTTPS are essential for securing web applications and ensuring the privacy and integrity of data transmitted between a client and a server.\n\n### Objective and Scope\nThe objective of this documentation is to guide developers in configuring SSL and enabling HTTPS for a project built with Parcel Bundler. The scope of this documentation covers the necessary requirements, step-by-step instructions, code snippets, troubleshooting tips, and best practices for setting up SSL and HTTPS.\n\n### Requirements and Pre-requisites\nTo follow the instructions in this documentation, you will need the following:\n\n- A project built with Parcel Bundler\n- A domain or subdomain for your project\n- A valid SSL certificate for your domain or subdomain\n- Basic knowledge of the command line interface (CLI)\n\n### Step-by-Step Instructions\n1. Obtain an SSL Certificate:\n   - Purchase or obtain a valid SSL certificate for your domain or subdomain. You can obtain an SSL certificate from a trusted certificate authority (CA) or use a free certificate from Let's Encrypt.\n\n2. Install Parcel Bundler:\n   - If you haven't already, install Parcel Bundler globally by running the following command in your terminal:\n     ```\n     npm install -g parcel-bundler\n     ```\n\n3. Configure Parcel to Use HTTPS:\n   - In your project directory, create a file named `.env` if it doesn't already exist.\n   - Add the following line to the `.env` file:\n     ```\n     HTTPS=true\n     ```\n\n4. Configure Parcel to Use the SSL Certificate:\n   - Copy your SSL certificate files (certificate.crt and private.key) to your project directory.\n   - Create a file named `server.js` in your project directory.\n   - Add the following code to `server.js`:\n     ```javascript\n     const fs = require('fs');\n     const https = require('https');\n     const parcel = require('parcel-bundler');\n\n     const options = {\n       key: fs.readFileSync('./private.key'),\n       cert: fs.readFileSync('./certificate.crt')\n     };\n\n     const bundler = new parcel.Parcel('./src/index.html');\n     const server = https.createServer(options, bundler.middleware());\n\n     server.listen(1234, () => {\n       console.log('Server running on https://localhost:1234');\n     });\n     ```\n\n5. Start the Parcel Development Server:\n   - In your terminal, navigate to your project directory.\n   - Run the following command to start the Parcel development server:\n     ```\n     node server.js\n     ```\n\n6. Access Your Project via HTTPS:\n   - Open your web browser and visit `https://localhost:1234` (replace `localhost` with your domain or subdomain).\n   - You should now be able to access your project securely over HTTPS.\n\n### Code Snippets and Commands\n- Install Parcel Bundler globally:\n  ```\n  npm install -g parcel-bundler\n  ```\n\n- Start the Parcel development server:\n  ```\n  node server.js\n  ```\n\n### Troubleshooting and Common Issues\n- **Issue**: \"Error: listen EADDRINUSE: address already in use\" when starting the server.\n  - **Solution**: Make sure no other process is using the same port (1234 in the example). You can change the port number in `server.js` if needed.\n\n- **Issue**: \"Error: self signed certificate\" when accessing the project via HTTPS.\n  - **Solution**: If you're using a self-signed certificate, your browser may show a warning. You can bypass the warning and proceed to access your project securely.\n\n### Best Practices and Recommendations\n- Use a trusted certificate authority (CA) to obtain an SSL certificate for your domain or subdomain.\n- Regularly renew your SSL certificate to ensure uninterrupted HTTPS access.\n- Consider automating the SSL certificate renewal process using tools like Certbot or ACME.sh.\n- Implement HTTP to HTTPS redirection to ensure all traffic is encrypted.\n\n### Summary and Conclusion\nIn this documentation, we have covered the process of setting up SSL and enabling HTTPS for a project built with Parcel Bundler. By following the step-by-step instructions and best practices provided, you can ensure the secure transmission of data between your web application and its users. Remember to regularly update and renew your SSL certificate to maintain a secure environment."
}