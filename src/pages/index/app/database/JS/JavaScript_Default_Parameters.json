{
  "metadata": {
    "title": "JavaScript_Default_Parameters",
    "length": 494,
    "generated_by": "gpt-3.5-turbo",
    "timestamp": "2023-12-23T05:23:09.957Z"
  },
  "article": "## JavaScript Default Parameters\n\n### Introduction\nDefault parameters in JavaScript allow you to assign default values to function parameters if no value or an undefined value is passed when the function is called. This feature was introduced in ECMAScript 6 (ES6) and provides a convenient way to handle missing or undefined values without explicitly checking for them in the function body.\n\n### Objective and Scope\nThe objective of this documentation is to explain the concept of default parameters in JavaScript and demonstrate how to use them effectively. It covers the syntax, usage, and best practices for working with default parameters.\n\n### Requirements and Pre-requisites\nTo understand and implement default parameters in JavaScript, you should have a basic understanding of JavaScript syntax and functions. You will also need a JavaScript environment, such as a web browser or a Node.js installation, to run the code examples.\n\n### Step-by-Step Instructions\n1. Define a function with parameters:\n   ```javascript\n   function greet(name, message) {\n     console.log(`${message}, ${name}!`);\n   }\n   ```\n\n2. Call the function without passing any arguments:\n   ```javascript\n   greet();\n   ```\n   Output: `undefined, undefined!`\n\n3. Assign default values to the parameters:\n   ```javascript\n   function greet(name = 'Guest', message = 'Hello') {\n     console.log(`${message}, ${name}!`);\n   }\n   ```\n\n4. Call the function without passing any arguments:\n   ```javascript\n   greet();\n   ```\n   Output: `Hello, Guest!`\n\n5. Call the function with arguments:\n   ```javascript\n   greet('John', 'Hi');\n   ```\n   Output: `Hi, John!`\n\n### Code Snippets and Commands\n- Defining a function with default parameters:\n  ```javascript\n  function functionName(param1 = defaultValue1, param2 = defaultValue2) {\n    // function body\n  }\n  ```\n\n- Calling a function with default parameters:\n  ```javascript\n  functionName(); // uses default values\n  functionName(arg1); // uses default value for param2\n  functionName(arg1, arg2); // uses provided values for both parameters\n  ```\n\n### Troubleshooting and Common Issues\n- Make sure you are using a JavaScript environment that supports ES6 syntax, as default parameters were introduced in ES6.\n- Ensure that you are using the correct syntax for defining default parameters. They should be assigned in the function parameter list, not inside the function body.\n\n### Best Practices and Recommendations\n- Use default parameters to handle missing or undefined values in a function.\n- Be mindful of the order of parameters when defining default values. Parameters with default values should come after parameters without default values.\n- Avoid using complex expressions or function calls as default values, as they are only evaluated once when the function is defined.\n\n### Summary and Conclusion\nDefault parameters in JavaScript provide a convenient way to assign default values to function parameters. They allow you to handle missing or undefined values without explicitly checking for them in the function body. By using default parameters, you can write cleaner and more concise code. Remember to keep the scope and order of parameters in mind when defining default values."
}